<?php

namespace EncodingConversionDataLossChecker;

/**
 * Test class for EncodingConversionDataLossChecker.
 * Generated by PHPUnit on 2013-07-07 at 21:09:04.
 */

class EncodingConversionDataLossCheckerTest extends \PHPUnit_Framework_TestCase
{
    public function testUnsupportedFromEncoding()
    {
        $this->setExpectedException('EncodingConversionDataLossChecker\EncodingConversionDataLossCheckerException');
        $tester = new EncodingConversionDataLossChecker('Fu', 'ISO-8859-1');
        $tester->diagnose('Roses are red, violets are blue.');
    }

    public function testIncorrectFromEncoding()
    {
        $this->setExpectedException('EncodingConversionDataLossChecker\EncodingConversionDataLossCheckerException');
        $tester = new EncodingConversionDataLossChecker('Windows-1252', 'ISO-8859-1');
        $tester->diagnose('玫瑰是紅色的，紫羅蘭是藍色的。');
    }

    public function testUnsupportedToEncoding()
    {
        $this->setExpectedException('EncodingConversionDataLossChecker\EncodingConversionDataLossCheckerException');
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'Bar');
        $tester->diagnose('Roses are red, violets are blue.');
    }

    public function testSupportedEncodings()
    {
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $tester->diagnose('Roses are red, violets are blue.');
        $this->assertTrue(true); // We just tested whether we got here without throwing an exception
    }

    public function testSimpleConvert()
    {
        $testString = 'What could go wrong?';
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose($testString);
        $this->assertEquals(
            $diffArray,
            array()
        );
    }

    public function testFailedConvert()
    {
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose('The following should present a problem: 玫瑰是紅色的. See?');
        $this->assertEquals(
            array(
                array (
                    'startPos' => 40,
                    'characters' => '玫瑰是紅色的',
                    'length' => 6,
                )
            ),
            $diffArray
        );
    }

    public function testComplexConvert()
    {
        $testString = 'Ma võin klaasi süüa, see ei tee mulle midagi.';
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose($testString);
        $this->assertEquals(
            $diffArray,
            array()
        );
    }

    public function testComplexCombinedFailedConvert()
    {
        $testString = 'Ma võin klaasi süüa, see ei tee mulle midagi. 是紅. And then some.';
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose($testString);
        $this->assertEquals(
            array(
                array (
                    'startPos' => 46,
                    'characters' => '是紅',
                    'length' => 2,
                )
            ),
            $diffArray
        );
    }

    public function testComplexCombinedMultipleChunkFailedConvert()
    {
        $testString = 'Ma võin klaasi süüa, 是紅, see ei tee mulle midagi. 是紅. And then some.';
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose($testString);
        $this->assertEquals(
            array(
                array (
                    'startPos' => 21,
                    'characters' => '是紅',
                    'length' => 2,
                ),
                array (
                    'startPos' => 50,
                    'characters' => '是紅',
                    'length' => 2,
                )
            ),
            $diffArray
        );
    }

    public function testNoEuroWithIsoMinusOne()
    {
        $testString = 'In most of europe the standard currency is the euro (€), it has € as a symbol.';
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose($testString);
        $this->assertEquals(
            array(
                array (
                    'startPos' => 53,
                    'characters' => '€',
                    'length' => 1,
                ),
                array (
                    'startPos' => 64,
                    'characters' => '€',
                    'length' => 1,
                )
            ),
            $diffArray
        );
    }

    public function testEuroWithIsoMinusFifteen()
    {
        $testString = 'In most of europe the standard currency is the euro (€), it has € as a symbol.';
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-15');
        $diffArray = $tester->diagnose($testString);
        $this->assertEquals(
            array(),
            $diffArray
        );
    }

    public function testLargerTextBlobMixed()
    {
        $testString =
            'Euro Symbol: €.
            Greek: Μπορώ να φάω σπασμένα γυαλιά χωρίς να πάθω τίποτα.
            Íslenska / Icelandic: Ég get etið gler án þess að meiða mig.
            Polish: Mogę jeść szkło, i mi nie szkodzi.
            Romanian: Pot să mănânc sticlă și ea nu mă rănește.
            Ukrainian: Я можу їсти шкло, й воно мені не пошкодить.
            Armenian: Կրնամ ապակի ուտել և ինծի անհանգիստ չըներ։
            Georgian: მინას ვჭამ და არა მტკივა.
            Hindi: मैं काँच खा सकता हूँ, मुझे उस से कोई पीडा नहीं होती.
            Hebrew(2): אני יכול לאכול זכוכית וזה לא מזיק לי.
            Yiddish(2): איך קען עסן גלאָז און עס טוט מיר נישט װײ.
            Arabic(2): أنا قادر على أكل الزجاج و هذا لا يؤلمني.
            Japanese: 私はガラスを食べられます。それは私を傷つけません。
            Thai: ฉันกินกระจกได้ แต่มันไม่ทำให้ฉันเจ็บ';

        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose($testString);

        $this->assertEquals(
            array (
                0 =>
                array (
                    'startPos' => 13,
                    'characters' => '€',
                    'length' => 1,
                ),
                1 =>
                array (
                    'startPos' => 35,
                    'characters' => 'Μπορώ',
                    'length' => 5,
                ),
                2 =>
                array (
                    'startPos' => 41,
                    'characters' => 'να',
                    'length' => 2,
                ),
                3 =>
                array (
                    'startPos' => 44,
                    'characters' => 'φάω',
                    'length' => 3,
                ),
                4 =>
                array (
                    'startPos' => 48,
                    'characters' => 'σπασμένα',
                    'length' => 8,
                ),
                5 =>
                array (
                    'startPos' => 57,
                    'characters' => 'γυαλιά',
                    'length' => 6,
                ),
                6 =>
                array (
                    'startPos' => 64,
                    'characters' => 'χωρίς',
                    'length' => 5,
                ),
                7 =>
                array (
                    'startPos' => 70,
                    'characters' => 'να',
                    'length' => 2,
                ),
                8 =>
                array (
                    'startPos' => 73,
                    'characters' => 'πάθω',
                    'length' => 4,
                ),
                9 =>
                array (
                    'startPos' => 78,
                    'characters' => 'τίποτα',
                    'length' => 6,
                ),
                10 =>
                array (
                    'startPos' => 182,
                    'characters' => 'ę',
                    'length' => 1,
                ),
                11 =>
                array (
                    'startPos' => 186,
                    'characters' => 'ść',
                    'length' => 2,
                ),
                12 =>
                array (
                    'startPos' => 192,
                    'characters' => 'ł',
                    'length' => 1,
                ),
                13 =>
                array (
                    'startPos' => 241,
                    'characters' => 'ă',
                    'length' => 1,
                ),
                14 =>
                array (
                    'startPos' => 244,
                    'characters' => 'ă',
                    'length' => 1,
                ),
                15 =>
                array (
                    'startPos' => 255,
                    'characters' => 'ă',
                    'length' => 1,
                ),
                16 =>
                array (
                    'startPos' => 257,
                    'characters' => 'ș',
                    'length' => 1,
                ),
                17 =>
                array (
                    'startPos' => 267,
                    'characters' => 'ă',
                    'length' => 1,
                ),
                18 =>
                array (
                    'startPos' => 270,
                    'characters' => 'ă',
                    'length' => 1,
                ),
                19 =>
                array (
                    'startPos' => 273,
                    'characters' => 'ș',
                    'length' => 1,
                ),
                20 =>
                array (
                    'startPos' => 301,
                    'characters' => 'Я',
                    'length' => 1,
                ),
                21 =>
                array (
                    'startPos' => 303,
                    'characters' => 'можу',
                    'length' => 4,
                ),
                22 =>
                array (
                    'startPos' => 308,
                    'characters' => 'їсти',
                    'length' => 4,
                ),
                23 =>
                array (
                    'startPos' => 313,
                    'characters' => 'шкло',
                    'length' => 4,
                ),
                24 =>
                array (
                    'startPos' => 319,
                    'characters' => 'й',
                    'length' => 1,
                ),
                25 =>
                array (
                    'startPos' => 321,
                    'characters' => 'воно',
                    'length' => 4,
                ),
                26 =>
                array (
                    'startPos' => 326,
                    'characters' => 'мені',
                    'length' => 4,
                ),
                27 =>
                array (
                    'startPos' => 331,
                    'characters' => 'не',
                    'length' => 2,
                ),
                28 =>
                array (
                    'startPos' => 334,
                    'characters' => 'пошкодить',
                    'length' => 9,
                ),
                29 =>
                array (
                    'startPos' => 367,
                    'characters' => 'Կրնամ',
                    'length' => 5,
                ),
                30 =>
                array (
                    'startPos' => 373,
                    'characters' => 'ապակի',
                    'length' => 5,
                ),
                31 =>
                array (
                    'startPos' => 379,
                    'characters' => 'ուտել',
                    'length' => 5,
                ),
                32 =>
                array (
                    'startPos' => 385,
                    'characters' => 'և',
                    'length' => 1,
                ),
                33 =>
                array (
                    'startPos' => 387,
                    'characters' => 'ինծի',
                    'length' => 4,
                ),
                34 =>
                array (
                    'startPos' => 392,
                    'characters' => 'անհանգիստ',
                    'length' => 9,
                ),
                35 =>
                array (
                    'startPos' => 402,
                    'characters' => 'չըներ։',
                    'length' => 6,
                ),
                36 =>
                array (
                    'startPos' => 431,
                    'characters' => 'მინას',
                    'length' => 5,
                ),
                37 =>
                array (
                    'startPos' => 437,
                    'characters' => 'ვჭამ',
                    'length' => 4,
                ),
                38 =>
                array (
                    'startPos' => 442,
                    'characters' => 'და',
                    'length' => 2,
                ),
                39 =>
                array (
                    'startPos' => 445,
                    'characters' => 'არა',
                    'length' => 3,
                ),
                40 =>
                array (
                    'startPos' => 449,
                    'characters' => 'მტკივა',
                    'length' => 6,
                ),
                41 =>
                array (
                    'startPos' => 476,
                    'characters' => 'मैं',
                    'length' => 3,
                ),
                42 =>
                array (
                    'startPos' => 480,
                    'characters' => 'काँच',
                    'length' => 4,
                ),
                43 =>
                array (
                    'startPos' => 485,
                    'characters' => 'खा',
                    'length' => 2,
                ),
                44 =>
                array (
                    'startPos' => 488,
                    'characters' => 'सकता',
                    'length' => 4,
                ),
                45 =>
                array (
                    'startPos' => 493,
                    'characters' => 'हूँ',
                    'length' => 3,
                ),
                46 =>
                array (
                    'startPos' => 498,
                    'characters' => 'मुझे',
                    'length' => 4,
                ),
                47 =>
                array (
                    'startPos' => 503,
                    'characters' => 'उस',
                    'length' => 2,
                ),
                48 =>
                array (
                    'startPos' => 506,
                    'characters' => 'से',
                    'length' => 2,
                ),
                49 =>
                array (
                    'startPos' => 509,
                    'characters' => 'कोई',
                    'length' => 3,
                ),
                50 =>
                array (
                    'startPos' => 513,
                    'characters' => 'पीडा',
                    'length' => 4,
                ),
                51 =>
                array (
                    'startPos' => 518,
                    'characters' => 'नहीं',
                    'length' => 4,
                ),
                52 =>
                array (
                    'startPos' => 523,
                    'characters' => 'होती',
                    'length' => 4,
                ),
                53 =>
                array (
                    'startPos' => 552,
                    'characters' => 'אני',
                    'length' => 3,
                ),
                54 =>
                array (
                    'startPos' => 556,
                    'characters' => 'יכול',
                    'length' => 4,
                ),
                55 =>
                array (
                    'startPos' => 561,
                    'characters' => 'לאכול',
                    'length' => 5,
                ),
                56 =>
                array (
                    'startPos' => 567,
                    'characters' => 'זכוכית',
                    'length' => 6,
                ),
                57 =>
                array (
                    'startPos' => 574,
                    'characters' => 'וזה',
                    'length' => 3,
                ),
                58 =>
                array (
                    'startPos' => 578,
                    'characters' => 'לא',
                    'length' => 2,
                ),
                59 =>
                array (
                    'startPos' => 581,
                    'characters' => 'מזיק',
                    'length' => 4,
                ),
                60 =>
                array (
                    'startPos' => 586,
                    'characters' => 'לי',
                    'length' => 2,
                ),
                61 =>
                array (
                    'startPos' => 614,
                    'characters' => 'איך',
                    'length' => 3,
                ),
                62 =>
                array (
                    'startPos' => 618,
                    'characters' => 'קען',
                    'length' => 3,
                ),
                63 =>
                array (
                    'startPos' => 622,
                    'characters' => 'עסן',
                    'length' => 3,
                ),
                64 =>
                array (
                    'startPos' => 626,
                    'characters' => 'גלאָז',
                    'length' => 5,
                ),
                65 =>
                array (
                    'startPos' => 632,
                    'characters' => 'און',
                    'length' => 3,
                ),
                66 =>
                array (
                    'startPos' => 636,
                    'characters' => 'עס',
                    'length' => 2,
                ),
                67 =>
                array (
                    'startPos' => 639,
                    'characters' => 'טוט',
                    'length' => 3,
                ),
                68 =>
                array (
                    'startPos' => 643,
                    'characters' => 'מיר',
                    'length' => 3,
                ),
                69 =>
                array (
                    'startPos' => 647,
                    'characters' => 'נישט',
                    'length' => 4,
                ),
                70 =>
                array (
                    'startPos' => 652,
                    'characters' => 'װײ',
                    'length' => 2,
                ),
                71 =>
                array (
                    'startPos' => 679,
                    'characters' => 'أنا',
                    'length' => 3,
                ),
                72 =>
                array (
                    'startPos' => 683,
                    'characters' => 'قادر',
                    'length' => 4,
                ),
                73 =>
                array (
                    'startPos' => 688,
                    'characters' => 'على',
                    'length' => 3,
                ),
                74 =>
                array (
                    'startPos' => 692,
                    'characters' => 'أكل',
                    'length' => 3,
                ),
                75 =>
                array (
                    'startPos' => 696,
                    'characters' => 'الزجاج',
                    'length' => 6,
                ),
                76 =>
                array (
                    'startPos' => 703,
                    'characters' => 'و',
                    'length' => 1,
                ),
                77 =>
                array (
                    'startPos' => 705,
                    'characters' => 'هذا',
                    'length' => 3,
                ),
                78 =>
                array (
                    'startPos' => 709,
                    'characters' => 'لا',
                    'length' => 2,
                ),
                79 =>
                array (
                    'startPos' => 712,
                    'characters' => 'يؤلمني',
                    'length' => 6,
                ),
                80 =>
                array (
                    'startPos' => 742,
                    'characters' => '私はガラスを食べられます。それは私を傷つけません。',
                    'length' => 25,
                ),
                81 =>
                array (
                    'startPos' => 786,
                    'characters' => 'ฉันกินกระจกได้',
                    'length' => 14,
                ),
                82 =>
                array (
                    'startPos' => 801,
                    'characters' => 'แต่มันไม่ทำให้ฉันเจ็บ',
                    'length' => 21,
                ),
            ),
            $diffArray
        );
    }

    public function testSubStringWrapOnEmptyDiffArray()
    {
        $testString = 'test';
        $diffArray = array();
        $tester = new EncodingConversionDataLossChecker('UTF-8','UTF-8');
        $wrappedHtml = $tester->subStringWrap($testString, $diffArray, '<p>', '</p>');
        $this->assertEquals(
            $testString,
            $wrappedHtml
        );
    }

    public function testMultipleSubStringWrap()
    {
        $testString = 'Ma võin klaasi süüa, 是紅, see ei tee mulle midagi. 是紅. And then some.';
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose($testString);
        $wrappedHtml = $tester->subStringWrap($testString, $diffArray, '<p>', '</p>');
        $this->assertEquals(
            'Ma võin klaasi süüa, <p>是紅</p>, see ei tee mulle midagi. <p>是紅</p>. And then some.',
            $wrappedHtml
        );
    }

    public function testMultipleSubStringWrapWhenCertainStringsAlsoExistWithinOthers()
    {
        $testString = 'Ma võin klaasi süüa, 是紅, see ei tee 是是紅紅 mulle midagi. 是紅. And then some.';
        $tester = new EncodingConversionDataLossChecker('UTF-8', 'ISO-8859-1');
        $diffArray = $tester->diagnose($testString);
        $wrappedHtml = $tester->subStringWrap($testString, $diffArray, '<p>', '</p>');
        $this->assertEquals(
            'Ma võin klaasi süüa, <p>是紅</p>, see ei tee <p>是是紅紅</p> mulle midagi. <p>是紅</p>. And then some.',
            $wrappedHtml
        );
    }
}